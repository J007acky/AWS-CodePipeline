pipeline {
    agent any
    tools {
        terraform 'Terraform-Jenkins'
    }

    parameters {
        string(name: 'RESOURCE_ADDRESS', defaultValue: '', description: 'Resource address for import')
        string(name: 'RESOURCE_ID', defaultValue: '/subscriptions/8a228cff-023f-42af-818d-51a84a828d46/resourceGroups/first-test-resources', description: 'Resource ID for import')
        string(name: 'ACCESS_KEY_BACKEND', defaultValue: '', description: 'State Storage for Terraform Backend')
        string(name: 'STORAGE_ACCOUNT_NAME', defaultValue: 'statestoragetf', description: '')
        string(name: 'CONTAINER_NAME', defaultValue: 'test-terraform-container', description: '')
        string(name: 'CON_STR', defaultValue: 'DefaultEndpointsProtocol=https;AccountName=statestoragetf;AccountKey=TgiUprX44G1FDdRwhKoX0HBCrfZ9ByeOqIqSAvjL2S4MPzcv/QP0+ZnX15erlDgHo3uxlhznwBzQ+AStm4Fz7w==;EndpointSuffix=core.windows.net', description: 'Connection String')
    }
    
     stages {
    //     stage('Check for Azure CLI') {
    //         steps{
    //             script {
    //                 sh 'command -v az > /dev/null 2>&1 && az --version || curl -sL https://aka.ms/InstallAzureCLIDeb | bash'
    //             }
    //         }
    //     }
        stage('terraform init') {
            steps {
                script {
                    echo 'Init Stage'
                    sh "echo 'yes' | terraform -chdir=IAC init -backend-config access_key=${params.ACCESS_KEY_BACKEND}"
                }
            }
        }
//         stage('terraform import') {
//           steps {
//              script {
//                 echo 'import existing resources'
//                sh "terraform -chdir=IAC import azurerm_resource_group.RahulRG ${params.RESOURCE_ID}"
//           }
//      }
// }

        stage('Package Function Code') {
            steps {
               echo 'zipping function code'
                sh 'cd Functions ;zip -r  ../function-code.zip ./*;zip -r ../function-code.zip .funcignore;cd ..'
            }
        }
        stage('Upload to Azure Storage') {
            steps {
                // Upload the zip file to Azure Storage
                script {
                    sh "az storage blob upload --connection-string '${params.CON_STR}' --account-name ${params.STORAGE_ACCOUNT_NAME} --container-name ${params.CONTAINER_NAME} --file function-code.zip --name function-code.zip --overwrite --query 'url' -o tsv"
                    env.DATE_END = sh(script: "date -u -d '+1 month' '+%Y-%m-%dT%H:%MZ'", returnStdout: true).trim()
                    def uploadCommand = """
                    az storage blob generate-sas \
                        --connection-string '${params.CON_STR}' \
                        --container-name '${params.CONTAINER_NAME}' \
                        --name function-code.zip \
                        --expiry '${DATE_END}' \
                        --full-uri
                    """
                    env.BLOB_URL = sh(script: uploadCommand | sed 's/^\"//;s/\"$//'", returnStdout: true).trim()
                    
                    echo "Variable set to ${BLOB_URL}"
                }
            }
        }     
             
        stage('terraform plan') {
            steps {
                script {
                    echo 'Plan Stage'
                    withCredentials([azureServicePrincipal('AZURE_CRED_PROD')]) {
//                sh 'terraform plan --var "subs_id"=$AZURE_SUBSCRIPTION_ID --var "tenant_id"=$AZURE_TENANT_ID --var "client_id"=$AZURE_CLIENT_ID --var "client_secret"=$AZURE_CLIENT_SECRET'
                          echo "terraform -chdir=IAC plan -var 'blob_url'=${BLOB_URL} -out=tfplan"
                    }
                }
            }
        }
        stage('terraform apply') {
            steps {
                script {
                    echo 'Apply Stage'
                    withCredentials([azureServicePrincipal('AZURE_CRED_PROD')]) {
                        echo "terraform -chdir=IAC apply -var 'blob_url'='${BLOB_URL}' -auto-approve"
                    }
                }
            }
        }
        stage('function deploy') {
            steps {
                script {
                    echo 'Function Deploy Stage'
                }
            }
        }
        stage('cleanup') {
            steps {
                script {
                    echo 'Cleanup Stage'
                }
            }
        }
    }
}
